Vamos agora trabalhar na funcionalidade de remoção de registros no banco de dados
vamos capturar o click sobre o ícone de lixeira e aí realizar uma requisição pro backend da aplicação
vamos passar a ação de 'remover' e o 'id'da tarefa que desejamos remover
vamos realizar a lógica de remoção utilizando PDO
e na sequência, vamos renderizar de novo a página atualizada



1. em todas_tarefas.php, comece associando remover() ao onclick do ícone '<i>', 
passando o id da tarefa como parâmetro

 <i class="fas fa-trash-alt fa-lg text-danger" onclick="remover(<?= $valor->id ?>)"></i>


2. na sequência crie a função remover() dentro do bloco JS da página
lembre-se que a função recebe o id da tarefa como parâmetro
já vamos criar a função redirecionando o usuário pra própria página todas_tarefas.php
porém agora vamso passar duas informações ('acao'e 'id', pra superglobal $_GET, através da url 

	        function remover(id){
				location.href = 'todas_tarefas.php?acao=remover&id=' + id
			}

            
isso força o redirecionamento pra mesma página, porém com esse acréssimo na url

daí, ao atualizar a página, note que o script é relido e nele, 
a segunda coisa que acontece é esse require aqui...

                <?php

                    $acao = 'recuperar';
                    require "tarefa_controller.php";
                    
...assim, por mais que a variável $acao seja igual a 'recuperar', quando o fluxo chega em 
tarefa_controller.php, a atribuição que vai permanecer em $acao será o valor dentro de $_GET
que já está definido, quando do location.href = 'todas_tarefas.php?acao=remover&id=' + id

assim, em tarefa_controller.php temos...

        $acao = isset($_GET['acao']) ?   ($_GET['acao']) : $acao;

nesse ponto então, a ação está definida como 'remover' e entramos consequentemente nesse fluxo
bora criar esse fluxo então

3. 
            elseif($acao == 'remover') {
                $tarefa = new Tarefa;
                $tarefa->__set('id', $_GET['id']);

                $conexao = new Conexao();

                $tarefaService = new TarefaService($conexao, $tarefa);
                $tarefaService->remover();

                
            }    

4. em seguida criamos a function pública remover() dentro de tarefa.service.php

        public function remover(){
        $query = 'delete from tb_tarefas where id = :id';
        $stmt = $this->conexao->prepare($query);
        $stmt->bindValue(':id', $this->tarefa->__get('id'));
        $stmt->execute();
       
    }
* obs: execute() retorna a quantidade de registros afetados



5. O último passo é redirecionar o usuário pra todas_tarefas, porém com a url limpa agora

            elseif($acao == 'remover') {
                $tarefa = new Tarefa;
                $tarefa->__set('id', $_GET['id']);

                $conexao = new Conexao();

                $tarefaService = new TarefaService($conexao, $tarefa);
                $tarefaService->remover();

                
            }    

            header('location: todas_tarefas.php');